######################################################
# Following targets need docker installed on the system
######################################################

# Define phony targets (targets that don't correspond to files)
.PHONY: docker-init db-dump docker-build docker-run start-db docker-stop docker-stop-clean docker-tools-build docker-seed docker-api-test

# Define variables for PostgreSQL container
POSTGRES_CONTAINER := postgres
POSTGRES_DB := cc_terrarium
POSTGRES_USER := postgres

# Define variables for pg_dump command
DUMP_DIR := ./data

docker-init:  ## Initialize the environment before running docker commands
	@touch ${HOME}/.netrc

db-dump:  ## Target for dumping PostgreSQL database to a file
	docker compose exec -T $(POSTGRES_CONTAINER) pg_dump -U $(POSTGRES_USER) $(POSTGRES_DB) | dos2unix > data/$(POSTGRES_DB).sql

docker-build:  ## Build container image
	docker compose build

docker-run:  ## Starts app in docker containers
	docker compose up -d

start-db:  ## Starts database in docker containers
	docker compose up -d postgres

docker-stop:  ## Stops and removes docker containers
	docker compose down

docker-stop-clean:  ## Stops and removes containers as well as volumes to cleanup database
	docker compose down -v

docker-tools-build:
	docker compose --profile tooling build

docker-seed: docker-tools-build start-db
	docker compose run --rm seeder

docker-api-test: docker-tools-build
	docker compose run --rm test

######################################################
# Following targets need terraform installed on the system
######################################################

.PHONY: clean_tf tf_init

TERRAFORM_DIR := ./terraform
TF_FILES := $(shell find $(TERRAFORM_DIR) -name '*.tf' -not -path '$(TERRAFORM_DIR)/.terraform/*')

clean_tf:
	rm -rf $(TERRAFORM_DIR)/.terraform
	rm -f $(TERRAFORM_DIR)/.terraform.lock.hcl

tf_init: $(TERRAFORM_DIR)/.terraform

# generate tf_resources.json file for set terraform providers
cache_data/tf_resources.json: $(TERRAFORM_DIR)/.terraform
	@echo "generating ./cache_data/tf_resources.json"
	@mkdir -p cache_data
	@cd terraform && terraform version && terraform providers schema -json > ../cache_data/tf_resources.json

$(TERRAFORM_DIR)/.terraform: $(TF_FILES)
	@cd $(TERRAFORM_DIR) && terraform version && terraform init || (terraform providers && exit 1)
	@touch $(TERRAFORM_DIR)/.terraform

######################################################
# Following targets need Go installed on the system
######################################################

.PHONY: test mod-tidy seed seed_resources seed_modules seed_mappings

-include .env
export

CLI_SRCS := $(shell find ./src/pkg ./src/cli \( -name '*.go' -o -name 'go.mod' \))

VERSION=$(shell git rev-parse --short HEAD 2> /dev/null)
TAG=$(shell git describe --exact-match --tags 2> /dev/null)
BUILD_DATE=$(shell date "+%Y-%m-%d")
BUILD_DIR=.bin
CLI_NAME = terrarium
BINARY_NAME = $(BUILD_DIR)/$(CLI_NAME)
BINARY_NAME_WIN = $(BUILD_DIR)/win/$(CLI_NAME).exe
BINARY_NAME_LINUX = $(BUILD_DIR)/linux/$(CLI_NAME)
BINARY_NAME_MACOS_ARM = $(BUILD_DIR)/macos/arm64/$(CLI_NAME)
BINARY_NAME_MACOS_I386 = $(BUILD_DIR)/macos/i386/$(CLI_NAME)

ifeq (${TAG},)
	ZIP_DATE=$(shell date "+%Y%m%d")
	ZIP_FILE=$(BUILD_DIR)/terrarium_$(ZIP_DATE)_$(VERSION).zip
else
	VERSION=$(TAG)
	ZIP_FILE=$(BUILD_DIR)/terrarium_$(TAG).zip
	VERFILE=$(shell echo $(TAG) > $(BUILD_DIR)/latest_version.txt)
endif

GO_LDFLAGS := -s -w
GO_LDFLAGS := -X github.com/cldcvr/terrarium/src/cli/internal/build.Version=$(VERSION) $(GO_LDFLAGS)
GO_LDFLAGS := -X github.com/cldcvr/terrarium/src/cli/internal/build.Date=$(BUILD_DATE) $(GO_LDFLAGS)
GO_LDFLAGS := -ldflags "$(GO_LDFLAGS)"

mod-clean:  # delete go*.sum files
	@echo "deleting .sum files..."
	@rm -f ./src/api/go.sum ./src/cli/go.sum ./src/pkg/go.sum ./go.work.sum

.PHONY: clean-binaries
clean-binaries:  ## Clean up artifacts generated by make
	@echo "-- Cleaning build directory"
	@rm -rf $(BUILD_DIR)/

mod-tidy:  # run go mod tidy on each workspace entity, and then sync workspace
	@echo "running tidy on api go module..."
	@cd src/api && go mod tidy -e
	@echo "running tidy on cli go module..."
	@cd src/cli && go mod tidy -e
	@echo "running tidy on pkg go module..."
	@cd src/pkg && go mod tidy -e
	@echo "running sync on go workspace..."
	@go mod download && go work sync

test:  ## Run go unit tests
	go test `go list github.com/cldcvr/terrarium/...`

seed: seed_resources seed_modules seed_mappings

seed_resources: $(BINARY_NAME) cache_data/tf_resources.json  ## Seed tf-provider resources into db from terraform/provider.tf
	@echo "Running resource seed..."
	@./$(BINARY_NAME) farm resources

seed_modules: $(BINARY_NAME) $(TERRAFORM_DIR)/.terraform  ## Seed tf-modules into db from terraform/modules.tf
	@echo "Running module seed..."
	@./$(BINARY_NAME) farm modules

seed_mappings: $(BINARY_NAME)  ## Load .env file and run seed_mappings
	@echo "Running mapping seed..."
	@./$(BINARY_NAME) farm mappings

define make_binary
	@echo "-- Building application binary $(1) for $(2)-$(3)"
	CGO_ENABLED=0 GOOS=$(2) GOARCH=$(3) go build $(GO_LDFLAGS) -v -o $(1) ./src/cli/terrarium
endef

$(BINARY_NAME): $(CLI_SRCS)
	$(call make_binary, $(BINARY_NAME),$(shell go env GOOS),$(shell go env GOARCH))
.PHONY: binary
binary: $(BINARY_NAME)  ## Build application binary (native)

$(BINARY_NAME_WIN): $(CLI_SRCS)
	$(call make_binary,$@,windows,amd64)
.PHONY: binary_win
binary_win: $(BINARY_NAME_WIN)   ## Build application binary for Windows

$(BINARY_NAME_LINUX): $(CLI_SRCS)
	$(call make_binary,$@,linux,amd64)
.PHONY: binary_linux
binary_linux: $(BINARY_NAME_LINUX)   ## Build application binary for Linux

$(BINARY_NAME_MACOS_ARM): $(CLI_SRCS)
	$(call make_binary,$@,darwin,arm64)
$(BINARY_NAME_MACOS_I386): $(CLI_SRCS)
	$(call make_binary,$@,darwin,amd64)
.PHONY: binary_macos
binary_macos: $(BINARY_NAME_MACOS_ARM) $(BINARY_NAME_MACOS_I386)   ## Build application binaries for MacOS

$(ZIP_FILE): $(BINARY_NAME_WIN) $(BINARY_NAME_LINUX) binary_macos
	cd $(BUILD_DIR); \
	zip -r ../$(ZIP_FILE) *
.PHONY: binaries
binaries: $(ZIP_FILE)  ## Build binary for each supported platform and archive to zip

.PHONY: install
install:   ## Install the CLI native binary into GOBIN
	@echo "-- Installing native binary in $(shell go env GOBIN)"
	go install $(GO_LDFLAGS) github.com/cldcvr/terrarium/src/cli/terrarium

.PHONY: help
help:
	@grep -hE '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
