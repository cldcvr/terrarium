// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: terrariumpb/service.proto

package terrariumpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Module) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for TaxonomyId

	// no validation rules for ModuleName

	// no validation rules for Source

	// no validation rules for Version

	// no validation rules for Description

	for idx, item := range m.GetInputAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleValidationError{
					field:  fmt.Sprintf("InputAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Namespace

	return nil
}

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on CompletionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CompletionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CodeContext

	if len(m.GetModules()) < 1 {
		return CompletionRequestValidationError{
			field:  "Modules",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_CompletionRequest_Modules_Unique := make(map[string]struct{}, len(m.GetModules()))

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if _, exists := _CompletionRequest_Modules_Unique[item]; exists {
			return CompletionRequestValidationError{
				field:  fmt.Sprintf("Modules[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_CompletionRequest_Modules_Unique[item] = struct{}{}
		}

		if err := m._validateUuid(item); err != nil {
			return CompletionRequestValidationError{
				field:  fmt.Sprintf("Modules[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *CompletionRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CompletionRequestValidationError is the validation error returned by
// CompletionRequest.Validate if the designated constraints aren't met.
type CompletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionRequestValidationError) ErrorName() string {
	return "CompletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionRequestValidationError{}

// Validate checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompletionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CompletionResponseValidationError is the validation error returned by
// CompletionResponse.Validate if the designated constraints aren't met.
type CompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionResponseValidationError) ErrorName() string {
	return "CompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionResponseValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Page) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Size

	// no validation rules for Index

	// no validation rules for Total

	return nil
}

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListModulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModulesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for PopulateMappings

	return nil
}

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListModulesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesResponseValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModulesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListModulesResponseValidationError is the validation error returned by
// ListModulesResponse.Validate if the designated constraints aren't met.
type ListModulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesResponseValidationError) ErrorName() string {
	return "ListModulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesResponseValidationError{}

// Validate checks the field values on ListModuleAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListModuleAttributesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetModuleId()); err != nil {
		return ListModuleAttributesRequestValidationError{
			field:  "ModuleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModuleAttributesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for PopulateMappings

	return nil
}

func (m *ListModuleAttributesRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListModuleAttributesRequestValidationError is the validation error returned
// by ListModuleAttributesRequest.Validate if the designated constraints
// aren't met.
type ListModuleAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModuleAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModuleAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModuleAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModuleAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModuleAttributesRequestValidationError) ErrorName() string {
	return "ListModuleAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModuleAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModuleAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModuleAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModuleAttributesRequestValidationError{}

// Validate checks the field values on ListModuleAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListModuleAttributesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModuleAttributesResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModuleAttributesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListModuleAttributesResponseValidationError is the validation error returned
// by ListModuleAttributesResponse.Validate if the designated constraints
// aren't met.
type ListModuleAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModuleAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModuleAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModuleAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModuleAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModuleAttributesResponseValidationError) ErrorName() string {
	return "ListModuleAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModuleAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModuleAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModuleAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModuleAttributesResponseValidationError{}

// Validate checks the field values on ModuleAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ModuleAttribute) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetParentModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleAttributeValidationError{
				field:  "ParentModule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOutputModuleAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleAttributeValidationError{
					field:  fmt.Sprintf("OutputModuleAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Optional

	return nil
}

// ModuleAttributeValidationError is the validation error returned by
// ModuleAttribute.Validate if the designated constraints aren't met.
type ModuleAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleAttributeValidationError) ErrorName() string { return "ModuleAttributeValidationError" }

// Error satisfies the builtin error interface
func (e ModuleAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleAttributeValidationError{}

// Validate checks the field values on Dependency with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dependency) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for InterfaceId

	// no validation rules for Title

	// no validation rules for Description

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DependencyValidationError is the validation error returned by
// Dependency.Validate if the designated constraints aren't met.
type DependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyValidationError) ErrorName() string { return "DependencyValidationError" }

// Error satisfies the builtin error interface
func (e DependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *App) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for EnvPrefix

	if v, ok := interface{}(m.GetCompute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Compute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDependencies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Dependencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on AppDependency with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AppDependency) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Use

	// no validation rules for EnvPrefix

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppDependencyValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Outputs

	// no validation rules for NoProvision

	return nil
}

// AppDependencyValidationError is the validation error returned by
// AppDependency.Validate if the designated constraints aren't met.
type AppDependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDependencyValidationError) ErrorName() string { return "AppDependencyValidationError" }

// Error satisfies the builtin error interface
func (e AppDependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDependencyValidationError{}

// Validate checks the field values on JSONSchema with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JSONSchema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JSONSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExamples() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaValidationError{
					field:  fmt.Sprintf("Examples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MinLength

	// no validation rules for MaxLength

	// no validation rules for Pattern

	// no validation rules for Format

	// no validation rules for Minimum

	// no validation rules for Maximum

	// no validation rules for ExclusiveMinimum

	// no validation rules for ExclusiveMaximum

	// no validation rules for MultipleOf

	if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JSONSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdditionalItems

	// no validation rules for MinItems

	// no validation rules for MaxItems

	// no validation rules for UniqueItems

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// JSONSchemaValidationError is the validation error returned by
// JSONSchema.Validate if the designated constraints aren't met.
type JSONSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSONSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSONSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSONSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSONSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSONSchemaValidationError) ErrorName() string { return "JSONSchemaValidationError" }

// Error satisfies the builtin error interface
func (e JSONSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSONSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSONSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSONSchemaValidationError{}

// Validate checks the field values on ListDependenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDependenciesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDependenciesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for Taxonomy

	return nil
}

// ListDependenciesRequestValidationError is the validation error returned by
// ListDependenciesRequest.Validate if the designated constraints aren't met.
type ListDependenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDependenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDependenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDependenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDependenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDependenciesRequestValidationError) ErrorName() string {
	return "ListDependenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDependenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDependenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDependenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDependenciesRequestValidationError{}

// Validate checks the field values on ListDependenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDependenciesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDependencies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDependenciesResponseValidationError{
					field:  fmt.Sprintf("Dependencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDependenciesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDependenciesResponseValidationError is the validation error returned by
// ListDependenciesResponse.Validate if the designated constraints aren't met.
type ListDependenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDependenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDependenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDependenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDependenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDependenciesResponseValidationError) ErrorName() string {
	return "ListDependenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDependenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDependenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDependenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDependenciesResponseValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Schema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on DependencyInputsAndOutputs with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DependencyInputsAndOutputs) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	switch m.DefaultValue.(type) {

	case *DependencyInputsAndOutputs_DefaultNumber:
		// no validation rules for DefaultNumber

	case *DependencyInputsAndOutputs_DefaultString:
		// no validation rules for DefaultString

	}

	return nil
}

// DependencyInputsAndOutputsValidationError is the validation error returned
// by DependencyInputsAndOutputs.Validate if the designated constraints aren't met.
type DependencyInputsAndOutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsValidationError{}

// Validate checks the field values on DependencyInputsAndOutputsJSONSchema
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DependencyInputsAndOutputsJSONSchema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	for key, val := range m.GetProperties() {
		_ = val

		// no validation rules for Properties[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DependencyInputsAndOutputsJSONSchemaValidationError{
					field:  fmt.Sprintf("Properties[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DependencyInputsAndOutputsJSONSchemaValidationError is the validation error
// returned by DependencyInputsAndOutputsJSONSchema.Validate if the designated
// constraints aren't met.
type DependencyInputsAndOutputsJSONSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsJSONSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputsJSONSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsJSONSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsJSONSchemaValidationError{}

// Validate checks the field values on DependencyInputsAndOutputsDependency
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DependencyInputsAndOutputsDependency) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyInputsAndOutputsDependencyValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyInputsAndOutputsDependencyValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DependencyInputsAndOutputsDependencyValidationError is the validation error
// returned by DependencyInputsAndOutputsDependency.Validate if the designated
// constraints aren't met.
type DependencyInputsAndOutputsDependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsDependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsDependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsDependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsDependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsDependencyValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsDependencyValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsDependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputsDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsDependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsDependencyValidationError{}

// Validate checks the field values on ListTaxonomyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTaxonomyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaxonomyRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Taxonomy

	return nil
}

// ListTaxonomyRequestValidationError is the validation error returned by
// ListTaxonomyRequest.Validate if the designated constraints aren't met.
type ListTaxonomyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxonomyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxonomyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxonomyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxonomyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxonomyRequestValidationError) ErrorName() string {
	return "ListTaxonomyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxonomyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxonomyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxonomyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxonomyRequestValidationError{}

// Validate checks the field values on ListTaxonomyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTaxonomyResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTaxonomy() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaxonomyResponseValidationError{
					field:  fmt.Sprintf("Taxonomy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaxonomyResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTaxonomyResponseValidationError is the validation error returned by
// ListTaxonomyResponse.Validate if the designated constraints aren't met.
type ListTaxonomyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxonomyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxonomyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxonomyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxonomyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxonomyResponseValidationError) ErrorName() string {
	return "ListTaxonomyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxonomyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxonomyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxonomyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxonomyResponseValidationError{}

// Validate checks the field values on Taxonomy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Taxonomy) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// TaxonomyValidationError is the validation error returned by
// Taxonomy.Validate if the designated constraints aren't met.
type TaxonomyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaxonomyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaxonomyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaxonomyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaxonomyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaxonomyValidationError) ErrorName() string { return "TaxonomyValidationError" }

// Error satisfies the builtin error interface
func (e TaxonomyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaxonomy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaxonomyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaxonomyValidationError{}

// Validate checks the field values on ListPlatformsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPlatformsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlatformsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for Taxonomy

	_ListPlatformsRequest_InterfaceUuid_Unique := make(map[string]struct{}, len(m.GetInterfaceUuid()))

	for idx, item := range m.GetInterfaceUuid() {
		_, _ = idx, item

		if _, exists := _ListPlatformsRequest_InterfaceUuid_Unique[item]; exists {
			return ListPlatformsRequestValidationError{
				field:  fmt.Sprintf("InterfaceUuid[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_ListPlatformsRequest_InterfaceUuid_Unique[item] = struct{}{}
		}

		if err := m._validateUuid(item); err != nil {
			return ListPlatformsRequestValidationError{
				field:  fmt.Sprintf("InterfaceUuid[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *ListPlatformsRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListPlatformsRequestValidationError is the validation error returned by
// ListPlatformsRequest.Validate if the designated constraints aren't met.
type ListPlatformsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformsRequestValidationError) ErrorName() string {
	return "ListPlatformsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformsRequestValidationError{}

// Validate checks the field values on ListPlatformsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPlatformsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPlatforms() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlatformsResponseValidationError{
					field:  fmt.Sprintf("Platforms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlatformsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPlatformsResponseValidationError is the validation error returned by
// ListPlatformsResponse.Validate if the designated constraints aren't met.
type ListPlatformsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformsResponseValidationError) ErrorName() string {
	return "ListPlatformsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformsResponseValidationError{}

// Validate checks the field values on Platform with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Platform) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for RepoUrl

	// no validation rules for RepoDir

	// no validation rules for RepoCommit

	// no validation rules for RefLabel

	// no validation rules for RefType

	// no validation rules for Components

	return nil
}

// PlatformValidationError is the validation error returned by
// Platform.Validate if the designated constraints aren't met.
type PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformValidationError) ErrorName() string { return "PlatformValidationError" }

// Error satisfies the builtin error interface
func (e PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformValidationError{}

// Validate checks the field values on ListComponentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComponentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetPlatformId()); err != nil {
		return ListComponentsRequestValidationError{
			field:  "PlatformId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComponentsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for Taxonomy

	return nil
}

func (m *ListComponentsRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListComponentsRequestValidationError is the validation error returned by
// ListComponentsRequest.Validate if the designated constraints aren't met.
type ListComponentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentsRequestValidationError) ErrorName() string {
	return "ListComponentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentsRequestValidationError{}

// Validate checks the field values on ListComponentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComponentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComponentsResponseValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComponentsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListComponentsResponseValidationError is the validation error returned by
// ListComponentsResponse.Validate if the designated constraints aren't met.
type ListComponentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentsResponseValidationError) ErrorName() string {
	return "ListComponentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentsResponseValidationError{}

// Validate checks the field values on Component with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Component) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for InterfaceUuid

	// no validation rules for InterfaceId

	// no validation rules for Title

	// no validation rules for Description

	if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ComponentValidationError is the validation error returned by
// Component.Validate if the designated constraints aren't met.
type ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentValidationError) ErrorName() string { return "ComponentValidationError" }

// Error satisfies the builtin error interface
func (e ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentValidationError{}
