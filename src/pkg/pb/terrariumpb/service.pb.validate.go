// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: terrariumpb/service.proto

package terrariumpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaxonomyId

	// no validation rules for ModuleName

	// no validation rules for Source

	// no validation rules for Version

	// no validation rules for Description

	for idx, item := range m.GetInputAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModuleValidationError{
						field:  fmt.Sprintf("InputAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModuleValidationError{
						field:  fmt.Sprintf("InputAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleValidationError{
					field:  fmt.Sprintf("InputAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}

	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on CompletionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompletionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionRequestMultiError, or nil if none found.
func (m *CompletionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CodeContext

	if len(m.GetModules()) < 1 {
		err := CompletionRequestValidationError{
			field:  "Modules",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CompletionRequest_Modules_Unique := make(map[string]struct{}, len(m.GetModules()))

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if _, exists := _CompletionRequest_Modules_Unique[item]; exists {
			err := CompletionRequestValidationError{
				field:  fmt.Sprintf("Modules[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CompletionRequest_Modules_Unique[item] = struct{}{}
		}

		if err := m._validateUuid(item); err != nil {
			err = CompletionRequestValidationError{
				field:  fmt.Sprintf("Modules[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CompletionRequestMultiError(errors)
	}

	return nil
}

func (m *CompletionRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CompletionRequestMultiError is an error wrapping multiple validation errors
// returned by CompletionRequest.ValidateAll() if the designated constraints
// aren't met.
type CompletionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionRequestMultiError) AllErrors() []error { return m }

// CompletionRequestValidationError is the validation error returned by
// CompletionRequest.Validate if the designated constraints aren't met.
type CompletionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionRequestValidationError) ErrorName() string {
	return "CompletionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionRequestValidationError{}

// Validate checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompletionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompletionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompletionResponseMultiError, or nil if none found.
func (m *CompletionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompletionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompletionResponseMultiError(errors)
	}

	return nil
}

// CompletionResponseMultiError is an error wrapping multiple validation errors
// returned by CompletionResponse.ValidateAll() if the designated constraints
// aren't met.
type CompletionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompletionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompletionResponseMultiError) AllErrors() []error { return m }

// CompletionResponseValidationError is the validation error returned by
// CompletionResponse.Validate if the designated constraints aren't met.
type CompletionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompletionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompletionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompletionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompletionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompletionResponseValidationError) ErrorName() string {
	return "CompletionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompletionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompletionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompletionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompletionResponseValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Index

	// no validation rules for Total

	if len(errors) > 0 {
		return PageMultiError(errors)
	}

	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesRequestMultiError, or nil if none found.
func (m *ListModulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListModulesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListModulesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModulesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for PopulateMappings

	if len(errors) > 0 {
		return ListModulesRequestMultiError(errors)
	}

	return nil
}

// ListModulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListModulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesRequestMultiError) AllErrors() []error { return m }

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesResponseMultiError, or nil if none found.
func (m *ListModulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModulesResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModulesResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesResponseValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListModulesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListModulesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModulesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListModulesResponseMultiError(errors)
	}

	return nil
}

// ListModulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListModulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListModulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesResponseMultiError) AllErrors() []error { return m }

// ListModulesResponseValidationError is the validation error returned by
// ListModulesResponse.Validate if the designated constraints aren't met.
type ListModulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesResponseValidationError) ErrorName() string {
	return "ListModulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesResponseValidationError{}

// Validate checks the field values on ListModuleAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModuleAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModuleAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModuleAttributesRequestMultiError, or nil if none found.
func (m *ListModuleAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModuleAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetModuleId()); err != nil {
		err = ListModuleAttributesRequestValidationError{
			field:  "ModuleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListModuleAttributesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListModuleAttributesRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModuleAttributesRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for PopulateMappings

	if len(errors) > 0 {
		return ListModuleAttributesRequestMultiError(errors)
	}

	return nil
}

func (m *ListModuleAttributesRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListModuleAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by ListModuleAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListModuleAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModuleAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModuleAttributesRequestMultiError) AllErrors() []error { return m }

// ListModuleAttributesRequestValidationError is the validation error returned
// by ListModuleAttributesRequest.Validate if the designated constraints
// aren't met.
type ListModuleAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModuleAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModuleAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModuleAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModuleAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModuleAttributesRequestValidationError) ErrorName() string {
	return "ListModuleAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModuleAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModuleAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModuleAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModuleAttributesRequestValidationError{}

// Validate checks the field values on ListModuleAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModuleAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModuleAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModuleAttributesResponseMultiError, or nil if none found.
func (m *ListModuleAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModuleAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModuleAttributesResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModuleAttributesResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModuleAttributesResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListModuleAttributesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListModuleAttributesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListModuleAttributesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListModuleAttributesResponseMultiError(errors)
	}

	return nil
}

// ListModuleAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ListModuleAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListModuleAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModuleAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModuleAttributesResponseMultiError) AllErrors() []error { return m }

// ListModuleAttributesResponseValidationError is the validation error returned
// by ListModuleAttributesResponse.Validate if the designated constraints
// aren't met.
type ListModuleAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModuleAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModuleAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModuleAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModuleAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModuleAttributesResponseValidationError) ErrorName() string {
	return "ListModuleAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModuleAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModuleAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModuleAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModuleAttributesResponseValidationError{}

// Validate checks the field values on ModuleAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModuleAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModuleAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModuleAttributeMultiError, or nil if none found.
func (m *ModuleAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *ModuleAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetParentModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleAttributeValidationError{
					field:  "ParentModule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleAttributeValidationError{
					field:  "ParentModule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleAttributeValidationError{
				field:  "ParentModule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOutputModuleAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModuleAttributeValidationError{
						field:  fmt.Sprintf("OutputModuleAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModuleAttributeValidationError{
						field:  fmt.Sprintf("OutputModuleAttributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModuleAttributeValidationError{
					field:  fmt.Sprintf("OutputModuleAttributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Optional

	if len(errors) > 0 {
		return ModuleAttributeMultiError(errors)
	}

	return nil
}

// ModuleAttributeMultiError is an error wrapping multiple validation errors
// returned by ModuleAttribute.ValidateAll() if the designated constraints
// aren't met.
type ModuleAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleAttributeMultiError) AllErrors() []error { return m }

// ModuleAttributeValidationError is the validation error returned by
// ModuleAttribute.Validate if the designated constraints aren't met.
type ModuleAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleAttributeValidationError) ErrorName() string { return "ModuleAttributeValidationError" }

// Error satisfies the builtin error interface
func (e ModuleAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleAttributeValidationError{}

// Validate checks the field values on Dependency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dependency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dependency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DependencyMultiError, or
// nil if none found.
func (m *Dependency) ValidateAll() error {
	return m.validate(true)
}

func (m *Dependency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InterfaceId

	// no validation rules for Title

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DependencyValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DependencyValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DependencyValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DependencyValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DependencyMultiError(errors)
	}

	return nil
}

// DependencyMultiError is an error wrapping multiple validation errors
// returned by Dependency.ValidateAll() if the designated constraints aren't met.
type DependencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DependencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DependencyMultiError) AllErrors() []error { return m }

// DependencyValidationError is the validation error returned by
// Dependency.Validate if the designated constraints aren't met.
type DependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyValidationError) ErrorName() string { return "DependencyValidationError" }

// Error satisfies the builtin error interface
func (e DependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyValidationError{}

// Validate checks the field values on JSONSchema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSONSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSONSchema with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSONSchemaMultiError, or
// nil if none found.
func (m *JSONSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *JSONSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDefault()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JSONSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JSONSchemaValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JSONSchemaValidationError{
				field:  "Default",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JSONSchemaValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JSONSchemaValidationError{
						field:  fmt.Sprintf("Examples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaValidationError{
					field:  fmt.Sprintf("Examples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnum() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JSONSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JSONSchemaValidationError{
						field:  fmt.Sprintf("Enum[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JSONSchemaValidationError{
					field:  fmt.Sprintf("Enum[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MinLength

	// no validation rules for MaxLength

	// no validation rules for Pattern

	// no validation rules for Format

	// no validation rules for Minimum

	// no validation rules for Maximum

	// no validation rules for ExclusiveMinimum

	// no validation rules for ExclusiveMaximum

	// no validation rules for MultipleOf

	if all {
		switch v := interface{}(m.GetItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JSONSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JSONSchemaValidationError{
					field:  "Items",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JSONSchemaValidationError{
				field:  "Items",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AdditionalItems

	// no validation rules for MinItems

	// no validation rules for MaxItems

	// no validation rules for UniqueItems

	{
		sorted_keys := make([]string, len(m.GetProperties()))
		i := 0
		for key := range m.GetProperties() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProperties()[key]
			_ = val

			// no validation rules for Properties[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, JSONSchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, JSONSchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return JSONSchemaValidationError{
						field:  fmt.Sprintf("Properties[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return JSONSchemaMultiError(errors)
	}

	return nil
}

// JSONSchemaMultiError is an error wrapping multiple validation errors
// returned by JSONSchema.ValidateAll() if the designated constraints aren't met.
type JSONSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSONSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSONSchemaMultiError) AllErrors() []error { return m }

// JSONSchemaValidationError is the validation error returned by
// JSONSchema.Validate if the designated constraints aren't met.
type JSONSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSONSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSONSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSONSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSONSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSONSchemaValidationError) ErrorName() string { return "JSONSchemaValidationError" }

// Error satisfies the builtin error interface
func (e JSONSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSONSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSONSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSONSchemaValidationError{}

// Validate checks the field values on ListDependenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDependenciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDependenciesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDependenciesResponseMultiError, or nil if none found.
func (m *ListDependenciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDependenciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDependencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDependenciesResponseValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDependenciesResponseValidationError{
						field:  fmt.Sprintf("Dependencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDependenciesResponseValidationError{
					field:  fmt.Sprintf("Dependencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDependenciesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDependenciesResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDependenciesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDependenciesResponseMultiError(errors)
	}

	return nil
}

// ListDependenciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDependenciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDependenciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDependenciesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDependenciesResponseMultiError) AllErrors() []error { return m }

// ListDependenciesResponseValidationError is the validation error returned by
// ListDependenciesResponse.Validate if the designated constraints aren't met.
type ListDependenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDependenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDependenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDependenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDependenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDependenciesResponseValidationError) ErrorName() string {
	return "ListDependenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDependenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDependenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDependenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDependenciesResponseValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	{
		sorted_keys := make([]string, len(m.GetProperties()))
		i := 0
		for key := range m.GetProperties() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProperties()[key]
			_ = val

			// no validation rules for Properties[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SchemaValidationError{
						field:  fmt.Sprintf("Properties[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on DependencyInputsAndOutputs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DependencyInputsAndOutputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DependencyInputsAndOutputs with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DependencyInputsAndOutputsMultiError, or nil if none found.
func (m *DependencyInputsAndOutputs) ValidateAll() error {
	return m.validate(true)
}

func (m *DependencyInputsAndOutputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	switch v := m.DefaultValue.(type) {
	case *DependencyInputsAndOutputs_DefaultNumber:
		if v == nil {
			err := DependencyInputsAndOutputsValidationError{
				field:  "DefaultValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DefaultNumber
	case *DependencyInputsAndOutputs_DefaultString:
		if v == nil {
			err := DependencyInputsAndOutputsValidationError{
				field:  "DefaultValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DefaultString
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DependencyInputsAndOutputsMultiError(errors)
	}

	return nil
}

// DependencyInputsAndOutputsMultiError is an error wrapping multiple
// validation errors returned by DependencyInputsAndOutputs.ValidateAll() if
// the designated constraints aren't met.
type DependencyInputsAndOutputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DependencyInputsAndOutputsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DependencyInputsAndOutputsMultiError) AllErrors() []error { return m }

// DependencyInputsAndOutputsValidationError is the validation error returned
// by DependencyInputsAndOutputs.Validate if the designated constraints aren't met.
type DependencyInputsAndOutputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsValidationError{}

// Validate checks the field values on DependencyInputsAndOutputsJSONSchema
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DependencyInputsAndOutputsJSONSchema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DependencyInputsAndOutputsJSONSchema
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DependencyInputsAndOutputsJSONSchemaMultiError, or nil if none found.
func (m *DependencyInputsAndOutputsJSONSchema) ValidateAll() error {
	return m.validate(true)
}

func (m *DependencyInputsAndOutputsJSONSchema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	{
		sorted_keys := make([]string, len(m.GetProperties()))
		i := 0
		for key := range m.GetProperties() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProperties()[key]
			_ = val

			// no validation rules for Properties[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, DependencyInputsAndOutputsJSONSchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, DependencyInputsAndOutputsJSONSchemaValidationError{
							field:  fmt.Sprintf("Properties[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return DependencyInputsAndOutputsJSONSchemaValidationError{
						field:  fmt.Sprintf("Properties[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return DependencyInputsAndOutputsJSONSchemaMultiError(errors)
	}

	return nil
}

// DependencyInputsAndOutputsJSONSchemaMultiError is an error wrapping multiple
// validation errors returned by
// DependencyInputsAndOutputsJSONSchema.ValidateAll() if the designated
// constraints aren't met.
type DependencyInputsAndOutputsJSONSchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DependencyInputsAndOutputsJSONSchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DependencyInputsAndOutputsJSONSchemaMultiError) AllErrors() []error { return m }

// DependencyInputsAndOutputsJSONSchemaValidationError is the validation error
// returned by DependencyInputsAndOutputsJSONSchema.Validate if the designated
// constraints aren't met.
type DependencyInputsAndOutputsJSONSchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsJSONSchemaValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsJSONSchemaValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsJSONSchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputsJSONSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsJSONSchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsJSONSchemaValidationError{}

// Validate checks the field values on DependencyInputsAndOutputsDependency
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DependencyInputsAndOutputsDependency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DependencyInputsAndOutputsDependency
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DependencyInputsAndOutputsDependencyMultiError, or nil if none found.
func (m *DependencyInputsAndOutputsDependency) ValidateAll() error {
	return m.validate(true)
}

func (m *DependencyInputsAndOutputsDependency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DependencyInputsAndOutputsDependencyValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DependencyInputsAndOutputsDependencyValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyInputsAndOutputsDependencyValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DependencyInputsAndOutputsDependencyValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DependencyInputsAndOutputsDependencyValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DependencyInputsAndOutputsDependencyValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DependencyInputsAndOutputsDependencyMultiError(errors)
	}

	return nil
}

// DependencyInputsAndOutputsDependencyMultiError is an error wrapping multiple
// validation errors returned by
// DependencyInputsAndOutputsDependency.ValidateAll() if the designated
// constraints aren't met.
type DependencyInputsAndOutputsDependencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DependencyInputsAndOutputsDependencyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DependencyInputsAndOutputsDependencyMultiError) AllErrors() []error { return m }

// DependencyInputsAndOutputsDependencyValidationError is the validation error
// returned by DependencyInputsAndOutputsDependency.Validate if the designated
// constraints aren't met.
type DependencyInputsAndOutputsDependencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DependencyInputsAndOutputsDependencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DependencyInputsAndOutputsDependencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DependencyInputsAndOutputsDependencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DependencyInputsAndOutputsDependencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DependencyInputsAndOutputsDependencyValidationError) ErrorName() string {
	return "DependencyInputsAndOutputsDependencyValidationError"
}

// Error satisfies the builtin error interface
func (e DependencyInputsAndOutputsDependencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDependencyInputsAndOutputsDependency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DependencyInputsAndOutputsDependencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DependencyInputsAndOutputsDependencyValidationError{}

// Validate checks the field values on ListTaxonomyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaxonomyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaxonomyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaxonomyRequestMultiError, or nil if none found.
func (m *ListTaxonomyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaxonomyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTaxonomyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTaxonomyRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaxonomyRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Taxonomy

	if len(errors) > 0 {
		return ListTaxonomyRequestMultiError(errors)
	}

	return nil
}

// ListTaxonomyRequestMultiError is an error wrapping multiple validation
// errors returned by ListTaxonomyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTaxonomyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaxonomyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaxonomyRequestMultiError) AllErrors() []error { return m }

// ListTaxonomyRequestValidationError is the validation error returned by
// ListTaxonomyRequest.Validate if the designated constraints aren't met.
type ListTaxonomyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxonomyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxonomyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxonomyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxonomyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxonomyRequestValidationError) ErrorName() string {
	return "ListTaxonomyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxonomyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxonomyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxonomyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxonomyRequestValidationError{}

// Validate checks the field values on ListTaxonomyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaxonomyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaxonomyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaxonomyResponseMultiError, or nil if none found.
func (m *ListTaxonomyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaxonomyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaxonomy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaxonomyResponseValidationError{
						field:  fmt.Sprintf("Taxonomy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaxonomyResponseValidationError{
						field:  fmt.Sprintf("Taxonomy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaxonomyResponseValidationError{
					field:  fmt.Sprintf("Taxonomy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTaxonomyResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTaxonomyResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaxonomyResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTaxonomyResponseMultiError(errors)
	}

	return nil
}

// ListTaxonomyResponseMultiError is an error wrapping multiple validation
// errors returned by ListTaxonomyResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTaxonomyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaxonomyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaxonomyResponseMultiError) AllErrors() []error { return m }

// ListTaxonomyResponseValidationError is the validation error returned by
// ListTaxonomyResponse.Validate if the designated constraints aren't met.
type ListTaxonomyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxonomyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxonomyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxonomyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxonomyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxonomyResponseValidationError) ErrorName() string {
	return "ListTaxonomyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxonomyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxonomyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxonomyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxonomyResponseValidationError{}

// Validate checks the field values on Taxonomy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Taxonomy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Taxonomy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaxonomyMultiError, or nil
// if none found.
func (m *Taxonomy) ValidateAll() error {
	return m.validate(true)
}

func (m *Taxonomy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TaxonomyMultiError(errors)
	}

	return nil
}

// TaxonomyMultiError is an error wrapping multiple validation errors returned
// by Taxonomy.ValidateAll() if the designated constraints aren't met.
type TaxonomyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaxonomyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaxonomyMultiError) AllErrors() []error { return m }

// TaxonomyValidationError is the validation error returned by
// Taxonomy.Validate if the designated constraints aren't met.
type TaxonomyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaxonomyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaxonomyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaxonomyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaxonomyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaxonomyValidationError) ErrorName() string { return "TaxonomyValidationError" }

// Error satisfies the builtin error interface
func (e TaxonomyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaxonomy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaxonomyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaxonomyValidationError{}

// Validate checks the field values on ListPlatformsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPlatformsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlatformsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlatformsRequestMultiError, or nil if none found.
func (m *ListPlatformsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlatformsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPlatformsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPlatformsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlatformsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Search

	// no validation rules for Taxonomy

	_ListPlatformsRequest_InterfaceUuid_Unique := make(map[string]struct{}, len(m.GetInterfaceUuid()))

	for idx, item := range m.GetInterfaceUuid() {
		_, _ = idx, item

		if _, exists := _ListPlatformsRequest_InterfaceUuid_Unique[item]; exists {
			err := ListPlatformsRequestValidationError{
				field:  fmt.Sprintf("InterfaceUuid[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ListPlatformsRequest_InterfaceUuid_Unique[item] = struct{}{}
		}

		if err := m._validateUuid(item); err != nil {
			err = ListPlatformsRequestValidationError{
				field:  fmt.Sprintf("InterfaceUuid[%v]", idx),
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListPlatformsRequestMultiError(errors)
	}

	return nil
}

func (m *ListPlatformsRequest) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListPlatformsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPlatformsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPlatformsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlatformsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlatformsRequestMultiError) AllErrors() []error { return m }

// ListPlatformsRequestValidationError is the validation error returned by
// ListPlatformsRequest.Validate if the designated constraints aren't met.
type ListPlatformsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformsRequestValidationError) ErrorName() string {
	return "ListPlatformsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformsRequestValidationError{}

// Validate checks the field values on ListPlatformsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPlatformsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlatformsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlatformsResponseMultiError, or nil if none found.
func (m *ListPlatformsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlatformsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPlatforms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPlatformsResponseValidationError{
						field:  fmt.Sprintf("Platforms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPlatformsResponseValidationError{
						field:  fmt.Sprintf("Platforms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlatformsResponseValidationError{
					field:  fmt.Sprintf("Platforms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPlatformsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPlatformsResponseValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlatformsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPlatformsResponseMultiError(errors)
	}

	return nil
}

// ListPlatformsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPlatformsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPlatformsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlatformsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlatformsResponseMultiError) AllErrors() []error { return m }

// ListPlatformsResponseValidationError is the validation error returned by
// ListPlatformsResponse.Validate if the designated constraints aren't met.
type ListPlatformsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlatformsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlatformsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlatformsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlatformsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlatformsResponseValidationError) ErrorName() string {
	return "ListPlatformsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlatformsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlatformsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlatformsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlatformsResponseValidationError{}

// Validate checks the field values on Platform with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Platform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Platform with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlatformMultiError, or nil
// if none found.
func (m *Platform) ValidateAll() error {
	return m.validate(true)
}

func (m *Platform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for RepoUrl

	// no validation rules for RepoDir

	// no validation rules for RepoCommit

	// no validation rules for RefLabel

	// no validation rules for Components

	if len(errors) > 0 {
		return PlatformMultiError(errors)
	}

	return nil
}

// PlatformMultiError is an error wrapping multiple validation errors returned
// by Platform.ValidateAll() if the designated constraints aren't met.
type PlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformMultiError) AllErrors() []error { return m }

// PlatformValidationError is the validation error returned by
// Platform.Validate if the designated constraints aren't met.
type PlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformValidationError) ErrorName() string { return "PlatformValidationError" }

// Error satisfies the builtin error interface
func (e PlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformValidationError{}
