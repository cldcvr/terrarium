// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: terrariumpb/service.proto

//go:generate mockery --name TerrariumServiceServer

package terrariumpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TerrariumService_HealthCheck_FullMethodName          = "/terrarium.v0.TerrariumService/HealthCheck"
	TerrariumService_ListModules_FullMethodName          = "/terrarium.v0.TerrariumService/ListModules"
	TerrariumService_CodeCompletion_FullMethodName       = "/terrarium.v0.TerrariumService/CodeCompletion"
	TerrariumService_ListModuleAttributes_FullMethodName = "/terrarium.v0.TerrariumService/ListModuleAttributes"
)

// TerrariumServiceClient is the client API for TerrariumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerrariumServiceClient interface {
	// Health check endpoint
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List modules matching the source pattern
	ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error)
	// CodeCompletion DEPRECATED returns HCL code snippet from the requested terraform module that includes the requested module,
	// and the modules that it refers to. In case the linked-modules are already there in the provided code-context, then the
	// returned code suggestion omits the existing modules and instead refers to it's attributes directly.
	CodeCompletion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error)
	// ListModuleAttributes returns a list of attributes of the given module.
	// Optionally, it can also include output suggestions that is attributes from other modules that can fullfil this module.
	ListModuleAttributes(ctx context.Context, in *ListModuleAttributesRequest, opts ...grpc.CallOption) (*ListModuleAttributesResponse, error)
}

type terrariumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerrariumServiceClient(cc grpc.ClientConnInterface) TerrariumServiceClient {
	return &terrariumServiceClient{cc}
}

func (c *terrariumServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TerrariumService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrariumServiceClient) ListModules(ctx context.Context, in *ListModulesRequest, opts ...grpc.CallOption) (*ListModulesResponse, error) {
	out := new(ListModulesResponse)
	err := c.cc.Invoke(ctx, TerrariumService_ListModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrariumServiceClient) CodeCompletion(ctx context.Context, in *CompletionRequest, opts ...grpc.CallOption) (*CompletionResponse, error) {
	out := new(CompletionResponse)
	err := c.cc.Invoke(ctx, TerrariumService_CodeCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terrariumServiceClient) ListModuleAttributes(ctx context.Context, in *ListModuleAttributesRequest, opts ...grpc.CallOption) (*ListModuleAttributesResponse, error) {
	out := new(ListModuleAttributesResponse)
	err := c.cc.Invoke(ctx, TerrariumService_ListModuleAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerrariumServiceServer is the server API for TerrariumService service.
// All implementations must embed UnimplementedTerrariumServiceServer
// for forward compatibility
type TerrariumServiceServer interface {
	// Health check endpoint
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// List modules matching the source pattern
	ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error)
	// CodeCompletion DEPRECATED returns HCL code snippet from the requested terraform module that includes the requested module,
	// and the modules that it refers to. In case the linked-modules are already there in the provided code-context, then the
	// returned code suggestion omits the existing modules and instead refers to it's attributes directly.
	CodeCompletion(context.Context, *CompletionRequest) (*CompletionResponse, error)
	// ListModuleAttributes returns a list of attributes of the given module.
	// Optionally, it can also include output suggestions that is attributes from other modules that can fullfil this module.
	ListModuleAttributes(context.Context, *ListModuleAttributesRequest) (*ListModuleAttributesResponse, error)
	mustEmbedUnimplementedTerrariumServiceServer()
}

// UnimplementedTerrariumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerrariumServiceServer struct {
}

func (UnimplementedTerrariumServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTerrariumServiceServer) ListModules(context.Context, *ListModulesRequest) (*ListModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModules not implemented")
}
func (UnimplementedTerrariumServiceServer) CodeCompletion(context.Context, *CompletionRequest) (*CompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeCompletion not implemented")
}
func (UnimplementedTerrariumServiceServer) ListModuleAttributes(context.Context, *ListModuleAttributesRequest) (*ListModuleAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleAttributes not implemented")
}
func (UnimplementedTerrariumServiceServer) mustEmbedUnimplementedTerrariumServiceServer() {}

// UnsafeTerrariumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerrariumServiceServer will
// result in compilation errors.
type UnsafeTerrariumServiceServer interface {
	mustEmbedUnimplementedTerrariumServiceServer()
}

func RegisterTerrariumServiceServer(s grpc.ServiceRegistrar, srv TerrariumServiceServer) {
	s.RegisterService(&TerrariumService_ServiceDesc, srv)
}

func _TerrariumService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrariumServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerrariumService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrariumServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrariumService_ListModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrariumServiceServer).ListModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerrariumService_ListModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrariumServiceServer).ListModules(ctx, req.(*ListModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrariumService_CodeCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrariumServiceServer).CodeCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerrariumService_CodeCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrariumServiceServer).CodeCompletion(ctx, req.(*CompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerrariumService_ListModuleAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerrariumServiceServer).ListModuleAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerrariumService_ListModuleAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerrariumServiceServer).ListModuleAttributes(ctx, req.(*ListModuleAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerrariumService_ServiceDesc is the grpc.ServiceDesc for TerrariumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerrariumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terrarium.v0.TerrariumService",
	HandlerType: (*TerrariumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TerrariumService_HealthCheck_Handler,
		},
		{
			MethodName: "ListModules",
			Handler:    _TerrariumService_ListModules_Handler,
		},
		{
			MethodName: "CodeCompletion",
			Handler:    _TerrariumService_CodeCompletion_Handler,
		},
		{
			MethodName: "ListModuleAttributes",
			Handler:    _TerrariumService_ListModuleAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "terrariumpb/service.proto",
}
