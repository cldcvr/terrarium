// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"

	mock "github.com/stretchr/testify/mock"

	schema "gorm.io/gorm/schema"
)

// Dialector is an autogenerated mock type for the Dialector type
type Dialector struct {
	mock.Mock
}

// BindVarTo provides a mock function with given fields: writer, stmt, v
func (_m *Dialector) BindVarTo(writer clause.Writer, stmt *gorm.Statement, v interface{}) {
	_m.Called(writer, stmt, v)
}

// DataTypeOf provides a mock function with given fields: _a0
func (_m *Dialector) DataTypeOf(_a0 *schema.Field) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*schema.Field) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DefaultValueOf provides a mock function with given fields: _a0
func (_m *Dialector) DefaultValueOf(_a0 *schema.Field) clause.Expression {
	ret := _m.Called(_a0)

	var r0 clause.Expression
	if rf, ok := ret.Get(0).(func(*schema.Field) clause.Expression); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clause.Expression)
		}
	}

	return r0
}

// Explain provides a mock function with given fields: sql, vars
func (_m *Dialector) Explain(sql string, vars ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, vars...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(sql, vars...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Initialize provides a mock function with given fields: _a0
func (_m *Dialector) Initialize(_a0 *gorm.DB) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrator provides a mock function with given fields: db
func (_m *Dialector) Migrator(db *gorm.DB) gorm.Migrator {
	ret := _m.Called(db)

	var r0 gorm.Migrator
	if rf, ok := ret.Get(0).(func(*gorm.DB) gorm.Migrator); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gorm.Migrator)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Dialector) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QuoteTo provides a mock function with given fields: _a0, _a1
func (_m *Dialector) QuoteTo(_a0 clause.Writer, _a1 string) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewDialector interface {
	mock.TestingT
	Cleanup(func())
}

// NewDialector creates a new instance of Dialector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDialector(t mockConstructorTestingTNewDialector) *Dialector {
	mock := &Dialector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
