// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	db "github.com/cldcvr/terrarium/src/pkg/db"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CreateDependencyInterface provides a mock function with given fields: e
func (_m *DB) CreateDependencyInterface(e *db.Dependency) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Dependency) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.Dependency) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Dependency) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFModule provides a mock function with given fields: e
func (_m *DB) CreateTFModule(e *db.TFModule) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFModule) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFModule) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFModule) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFModuleAttribute provides a mock function with given fields: e
func (_m *DB) CreateTFModuleAttribute(e *db.TFModuleAttribute) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFModuleAttribute) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFModuleAttribute) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFModuleAttribute) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFProvider provides a mock function with given fields: e
func (_m *DB) CreateTFProvider(e *db.TFProvider) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFProvider) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFProvider) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFProvider) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceAttribute provides a mock function with given fields: e
func (_m *DB) CreateTFResourceAttribute(e *db.TFResourceAttribute) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttribute) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttribute) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceAttribute) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceAttributesMapping provides a mock function with given fields: e
func (_m *DB) CreateTFResourceAttributesMapping(e *db.TFResourceAttributesMapping) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttributesMapping) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttributesMapping) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceAttributesMapping) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceType provides a mock function with given fields: e
func (_m *DB) CreateTFResourceType(e *db.TFResourceType) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceType) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceType) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceType) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaxonomy provides a mock function with given fields: e
func (_m *DB) CreateTaxonomy(e *db.Taxonomy) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Taxonomy) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.Taxonomy) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Taxonomy) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOutputMappingsByModuleID provides a mock function with given fields: ids
func (_m *DB) FindOutputMappingsByModuleID(ids ...uuid.UUID) (db.TFModules, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 db.TFModules
	var r1 error
	if rf, ok := ret.Get(0).(func(...uuid.UUID) (db.TFModules, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...uuid.UUID) db.TFModules); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TFModules)
		}
	}

	if rf, ok := ret.Get(1).(func(...uuid.UUID) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateTFProvider provides a mock function with given fields: e
func (_m *DB) GetOrCreateTFProvider(e *db.TFProvider) (uuid.UUID, bool, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(*db.TFProvider) (uuid.UUID, bool, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFProvider) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFProvider) bool); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(*db.TFProvider) error); ok {
		r2 = rf(e)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTFProvider provides a mock function with given fields: e, where
func (_m *DB) GetTFProvider(e *db.TFProvider, where *db.TFProvider) error {
	ret := _m.Called(e, where)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.TFProvider, *db.TFProvider) error); ok {
		r0 = rf(e, where)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTFResourceAttribute provides a mock function with given fields: e, where
func (_m *DB) GetTFResourceAttribute(e *db.TFResourceAttribute, where *db.TFResourceAttribute) error {
	ret := _m.Called(e, where)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttribute, *db.TFResourceAttribute) error); ok {
		r0 = rf(e, where)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTFResourceType provides a mock function with given fields: e, where
func (_m *DB) GetTFResourceType(e *db.TFResourceType, where *db.TFResourceType) error {
	ret := _m.Called(e, where)

	var r0 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceType, *db.TFResourceType) error); ok {
		r0 = rf(e, where)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaxonomyByFieldName provides a mock function with given fields: fieldName, fieldValue
func (_m *DB) GetTaxonomyByFieldName(fieldName string, fieldValue interface{}) (db.Taxonomy, error) {
	ret := _m.Called(fieldName, fieldValue)

	var r0 db.Taxonomy
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (db.Taxonomy, error)); ok {
		return rf(fieldName, fieldValue)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) db.Taxonomy); ok {
		r0 = rf(fieldName, fieldValue)
	} else {
		r0 = ret.Get(0).(db.Taxonomy)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(fieldName, fieldValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTFModuleAttributes provides a mock function with given fields: filterOps
func (_m *DB) QueryTFModuleAttributes(filterOps ...db.FilterOption) (db.TFModuleAttributes, error) {
	_va := make([]interface{}, len(filterOps))
	for _i := range filterOps {
		_va[_i] = filterOps[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 db.TFModuleAttributes
	var r1 error
	if rf, ok := ret.Get(0).(func(...db.FilterOption) (db.TFModuleAttributes, error)); ok {
		return rf(filterOps...)
	}
	if rf, ok := ret.Get(0).(func(...db.FilterOption) db.TFModuleAttributes); ok {
		r0 = rf(filterOps...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TFModuleAttributes)
		}
	}

	if rf, ok := ret.Get(1).(func(...db.FilterOption) error); ok {
		r1 = rf(filterOps...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTFModules provides a mock function with given fields: filterOps
func (_m *DB) QueryTFModules(filterOps ...db.FilterOption) (db.TFModules, error) {
	_va := make([]interface{}, len(filterOps))
	for _i := range filterOps {
		_va[_i] = filterOps[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 db.TFModules
	var r1 error
	if rf, ok := ret.Get(0).(func(...db.FilterOption) (db.TFModules, error)); ok {
		return rf(filterOps...)
	}
	if rf, ok := ret.Get(0).(func(...db.FilterOption) db.TFModules); ok {
		r0 = rf(filterOps...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.TFModules)
		}
	}

	if rf, ok := ret.Get(1).(func(...db.FilterOption) error); ok {
		r1 = rf(filterOps...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
