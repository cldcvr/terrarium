syntax = "proto3";

//go:generate mockery --name TerrariumServiceServer

package terrarium.v0;

option go_package = "github.com/cldcvr/terrarium/api/pkg/pb/terrariumpb";

import "google/protobuf/empty.proto";

import "api/pkg/pb/grpc/validator/validator.proto";
import "api/pkg/pb/google/api/annotations.proto";
import "api/pkg/pb/protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Terrarium Service API";
    version: "0";
  };
  schemes: HTTPS;
};

message Module {
  string id = 1;
  string taxonomy_id = 2;
  string module_name = 3;
  string source = 4;
  string description = 5;
}

message Resource {
  string id = 1;
  string name = 2;
}

message Attribute {
  string id = 1;
  string attribute_path = 2;
  string data_type = 3;
  string description = 4;
  bool optional = 5;
  bool computed = 6;
}

message ModuleAttribute {
  string id = 1;
  string module_id = 2;
  string module_attribute_name = 3;
  string description = 4;
  string related_resource_type_attribute_id = 5;
  bool optional = 6;
  bool computed = 7;
}

message CompletionRequest {
  string context = 1;
  repeated string modules = 2;
}

message CompletionResponse {
  repeated string suggestions = 1;
}

message DependencyRequest {
  string id = 1 [ (validate.rules).string.uuid = true ];
  string attribute_id = 2 [ (validate.rules).string = {uuid: true, ignore_empty: true} ];
}

message DependencyResponse {
  repeated Module modules = 1;
  repeated Resource resources = 2;
  repeated Attribute attributes = 3;
}

message ConsumerRequest {
  string id = 1;
  string attribute_id = 2;
}

message ConsumerResponse {
  repeated Module modules = 1;
  repeated Resource resources = 2;
  repeated Attribute attributes = 3;
}

message Page {
  int32 size = 1; // default 10, maximum no limit
  int32 index = 2; // 0 indexed, default 0
  int32 total = 3; // read-only
}

message ListModulesRequest {
  string search = 1; // optional search
  Page page = 2;
}

message ListModulesResponse {
  repeated Module modules = 1;
  Page page = 2;
}

message ListResourcesRequest {
  string search = 1; // optional search
  Page page = 2;
}

message ListResourcesResponse {
  repeated Resource resources = 1;
  Page page = 2;
}

service TerrariumService {
  // Health check endpoint
  rpc HealthCheck(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/v0/health"
    };
  }

  // List modules matching the source pattern
  rpc ListModules(ListModulesRequest) returns (ListModulesResponse) {
    option (google.api.http) = {
      get: "/v0/modules"
    };
  }

  // List resources matching the name pattern
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {
      get: "/v0/resources"
    };
  }

  // Get dependencies of a module or module attribute
  rpc GetModuleDependencies(DependencyRequest) returns (DependencyResponse) {
    option (google.api.http) = {
      get: "/v0/modules/{id}/dependencies"
      additional_bindings {
        get: "/v0/modules/{id}/attributes/{attribute_id}/dependencies"
      }
    };
  }

  // Get dependencies of a resource, or resource attribute
  rpc GetResourceDependencies(DependencyRequest) returns (DependencyResponse) {
    option (google.api.http) = {
      get: "/v0/resources/{id}/dependencies"
      additional_bindings {
        get: "/v0/resources/{id}/attributes/{attribute_id}/dependencies"
      }
    };
  }

  // Get consumers of a module or module attribute
  rpc GetModuleConsumers(ConsumerRequest) returns (ConsumerResponse) {
    option (google.api.http) = {
      get: "/v0/modules/{id}/consumers"
      additional_bindings {
        get: "/v0/modules/{id}/attributes/{attribute_id}/consumers"
      }
    };
  }

  // Get consumers of a resource, or resource attribute
  rpc GetResourceConsumers(ConsumerRequest) returns (ConsumerResponse) {
    option (google.api.http) = {
      get: "/v0/resources/{id}/consumers"
      additional_bindings {
        get: "/v0/resources/{id}/attributes/{attribute_id}/consumers"
      }
    };
  }

  // Code completion endpoint
  rpc CodeCompletion(CompletionRequest) returns (CompletionResponse) {
    option (google.api.http) = {
      get: "/v0/completion"
    };
  }
}
