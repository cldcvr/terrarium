// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	terrariumpb "github.com/cldcvr/terrarium/api/pkg/pb/terrariumpb"
)

// TerrariumServiceServer is an autogenerated mock type for the TerrariumServiceServer type
type TerrariumServiceServer struct {
	mock.Mock
}

// CodeCompletion provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) CodeCompletion(_a0 context.Context, _a1 *terrariumpb.CompletionRequest) (*terrariumpb.CompletionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.CompletionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.CompletionRequest) (*terrariumpb.CompletionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.CompletionRequest) *terrariumpb.CompletionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.CompletionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.CompletionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleConsumers provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) GetModuleConsumers(_a0 context.Context, _a1 *terrariumpb.ConsumerRequest) (*terrariumpb.ConsumerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.ConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ConsumerRequest) (*terrariumpb.ConsumerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ConsumerRequest) *terrariumpb.ConsumerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.ConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.ConsumerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModuleDependencies provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) GetModuleDependencies(_a0 context.Context, _a1 *terrariumpb.DependencyRequest) (*terrariumpb.DependencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.DependencyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.DependencyRequest) (*terrariumpb.DependencyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.DependencyRequest) *terrariumpb.DependencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.DependencyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.DependencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceConsumers provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) GetResourceConsumers(_a0 context.Context, _a1 *terrariumpb.ConsumerRequest) (*terrariumpb.ConsumerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.ConsumerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ConsumerRequest) (*terrariumpb.ConsumerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ConsumerRequest) *terrariumpb.ConsumerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.ConsumerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.ConsumerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceDependencies provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) GetResourceDependencies(_a0 context.Context, _a1 *terrariumpb.DependencyRequest) (*terrariumpb.DependencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.DependencyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.DependencyRequest) (*terrariumpb.DependencyResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.DependencyRequest) *terrariumpb.DependencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.DependencyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.DependencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) HealthCheck(_a0 context.Context, _a1 *emptypb.Empty) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModules provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) ListModules(_a0 context.Context, _a1 *terrariumpb.ListModulesRequest) (*terrariumpb.ListModulesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.ListModulesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ListModulesRequest) (*terrariumpb.ListModulesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ListModulesRequest) *terrariumpb.ListModulesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.ListModulesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.ListModulesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: _a0, _a1
func (_m *TerrariumServiceServer) ListResources(_a0 context.Context, _a1 *terrariumpb.ListResourcesRequest) (*terrariumpb.ListResourcesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *terrariumpb.ListResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ListResourcesRequest) (*terrariumpb.ListResourcesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *terrariumpb.ListResourcesRequest) *terrariumpb.ListResourcesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*terrariumpb.ListResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *terrariumpb.ListResourcesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTerrariumServiceServer provides a mock function with given fields:
func (_m *TerrariumServiceServer) mustEmbedUnimplementedTerrariumServiceServer() {
	_m.Called()
}

type mockConstructorTestingTNewTerrariumServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTerrariumServiceServer creates a new instance of TerrariumServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTerrariumServiceServer(t mockConstructorTestingTNewTerrariumServiceServer) *TerrariumServiceServer {
	mock := &TerrariumServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
