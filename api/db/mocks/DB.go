// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	db "github.com/cldcvr/terrarium/api/db"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CreateTFModule provides a mock function with given fields: e
func (_m *DB) CreateTFModule(e *db.TFModule) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFModule) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFModule) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFModule) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFModuleAttribute provides a mock function with given fields: e
func (_m *DB) CreateTFModuleAttribute(e *db.TFModuleAttribute) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFModuleAttribute) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFModuleAttribute) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFModuleAttribute) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFProvider provides a mock function with given fields: e
func (_m *DB) CreateTFProvider(e *db.TFProvider) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFProvider) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFProvider) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFProvider) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceAttribute provides a mock function with given fields: e
func (_m *DB) CreateTFResourceAttribute(e *db.TFResourceAttribute) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttribute) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttribute) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceAttribute) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceAttributesMapping provides a mock function with given fields: e
func (_m *DB) CreateTFResourceAttributesMapping(e *db.TFResourceAttributesMapping) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttributesMapping) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceAttributesMapping) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceAttributesMapping) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTFResourceType provides a mock function with given fields: e
func (_m *DB) CreateTFResourceType(e *db.TFResourceType) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.TFResourceType) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.TFResourceType) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.TFResourceType) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaxonomy provides a mock function with given fields: e
func (_m *DB) CreateTaxonomy(e *db.Taxonomy) (uuid.UUID, error) {
	ret := _m.Called(e)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*db.Taxonomy) (uuid.UUID, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(*db.Taxonomy) uuid.UUID); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*db.Taxonomy) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
